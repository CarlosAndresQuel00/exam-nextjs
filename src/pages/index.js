import Head from "next/head";
import api from "../api";
import { Button, Grid } from "@mui/material";
import { useEffect, useState } from "react";
import SearchIcon from "@mui/icons-material/Search";
import { Controller, useForm } from "react-hook-form";

export default function Home({ advices }) {
  const [adviceId, setAdviceId] = useState(advices.id);
  const [list, setList] = useState([]);
  const [search, setSearch] = useState("");
  const [searchList, setSearchList] = useState([]);
  const { handleSubmit, control, reset } = useForm();
  const [adviceData, setAdviceData] = useState("");

  useEffect(() => {
    if (search !== "") {
      const getData = async () => {
        const response = await api.get(`/search/${search}`);
        const advices = response.data.slips;
        setSearchList(advices);
      };

      getData();
    } else {
      return "Cargando datos...";
    }
  }, [search]);

  useEffect(() => {
    const getData = async () => {
      const response = await api.get(`/${adviceId}`);
      console.log("response", response.data);
      let slip = response.data.split(":");
      const stringAdvice = slip[3];
      const parts = stringAdvice.split("}");
      const onlyAdvice = parts[0];
      let adviceCompleted = "";
      for (let arrayAdvice in onlyAdvice) {
        if (onlyAdvice[arrayAdvice] !== '"') {
          adviceCompleted += onlyAdvice[arrayAdvice];
        }
      }
      console.log("response", adviceCompleted);
      setAdviceData(adviceCompleted);
    };

    getData();
  }, [adviceId]);

  const handleAddAdvice = () => {
    const newAdvice = {
      advice: adviceData,
    };
    setList((prevState) => [...prevState, newAdvice]);
  };

  const handleNextAdvice = () => {
    setAdviceId((prevState) => prevState + 1);
  };

  const handleDeleteAdvice = (pos) => {
    setList((prevState) => {
      return prevState.filter((advice, i) => i !== pos);
    });
  };

  const handleAddAdviceSearch = (pos, id) => {
    const advice = searchList[pos];

    const newAdvice = {
      id: id,
      advice: advice.advice,
    };
    setList((prevState) => [...prevState, newAdvice]);
  };

  const onSubmit = async (values) => {
    setSearch(values.search);
    reset({
      search: "",
    });
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container direction="row">
        <Grid container spacing={5} direction="column">
          <Grid item xs={6} textAlign="center">
            <h1>Consejo del día</h1>
            <p>{adviceData}</p>
            <Button variant="contained" onClick={handleAddAdvice}>
              Marcar como favorito
            </Button>{" "}
            <Button variant="contained" onClick={handleNextAdvice}>
              Siguiente consejo
            </Button>
          </Grid>
          <Grid item xs={6} textAlign="center">
            <h1>Consejos favoritos</h1>
            <table>
              <tbody>
                {list.map((advice, index) => (
                  <tr key={index}>
                    <td>{advice.advice}</td>
                    <td>
                      <Button
                        variant="contained"
                        onClick={() => handleDeleteAdvice(index)}
                      >
                        Quitar de la lista
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </Grid>
        </Grid>
        <Grid container>
          <Grid item xs={12} textAlign="center">
            <h1>Buscador de consejos</h1>
            <form onSubmit={handleSubmit(onSubmit)}>
              <div>
                Palabra clave:{" "}
                <Controller
                  name="search"
                  control={control}
                  defaultValue=""
                  render={({ field }) => (
                    <input required {...field} type="text" />
                  )}
                />
                <p></p>
              </div>
              <div>
                <Button
                  type="submit"
                  variant="contained"
                  startIcon={<SearchIcon />}
                >
                  Search
                </Button>
              </div>
            </form>
            <p>Resultados de la búsqueda</p>
            <p>Texto</p>
            <table style={{ margin: "0 auto" }}>
              <tbody>
                {searchList.map((advice, index) => (
                  <tr key={index}>
                    <td>{advice.advice}</td>
                    <td>
                      <Button
                        variant="contained"
                        onClick={() => handleAddAdviceSearch(index, advice.id)}
                      >
                        Marcar como favorito
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </Grid>
        </Grid>
      </Grid>
    </div>
  );
}

export async function getStaticProps() {
  let advices = [];
  try {
    const response = await api.get();
    advices = response.data.slip;
  } catch (e) {}

  return {
    props: { advices },
  };
}
