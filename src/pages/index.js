import Head from "next/head";
import api from "../api";
import { Button, Grid } from "@mui/material";
import { useEffect, useState } from "react";
import SearchIcon from "@mui/icons-material/Search";
import { Controller, useForm } from "react-hook-form";
import useSWR from "swr";

const fetcher = (url) => api.get(url).then((res) => res.data);

export default function Home({ advices }) {
  const [adviceId, setAdviceId] = useState(1);
  const [list, setList] = useState([]);
  const [search, setSearch] = useState("");
  const [searchList, setSearchList] = useState([]);
  const { handleSubmit, control, reset } = useForm();

  const { data, error } = useSWR(`/search/${search}`, fetcher);

  useEffect(() => {
    if (error) {
      return "Ocurrió un error";
    }

    if (!data) {
      return "Cargando datos...";
    }
  }, [search]);

  const handleAddAdvice = () => {
    const advice = advices.advice;

    const newAdvice = {
      id: advices.id,
      advice: advice,
    };
    setList((prevState) => [...prevState, newAdvice]);
  };

  const handleNextAdvice = () => {
    // getStaticProps(userId);
    // setAdviceId((prevState) => prevState + 1);
  };

  const handleDeleteAdvice = (pos) => {
    setList((prevState) => {
      return prevState.filter((advice, i) => i !== pos);
    });
  };

  const onSubmit = async (values) => {
    console.log("values", values);
    if (values !== "") {
      setSearch(values);
    }
    reset({
      search: "",
    });
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container direction="row">
        <Grid container spacing={5} direction="column">
          <Grid item xs={6} textAlign="center">
            <h1>Consejo del día</h1>
            <p>{advices.advice}</p>
            <Button variant="contained" onClick={handleAddAdvice}>
              Marcar como favorito
            </Button>{" "}
            <Button variant="contained" onClick={handleNextAdvice}>
              Siguiente consejo
            </Button>
          </Grid>
          <Grid item xs={6} textAlign="center">
            <h1>Consejos favoritos</h1>
            <table>
              <tbody>
                {list.map((advice, index) => (
                  <tr key={advice.id}>
                    <td>{advice.advice}</td>
                    <td>
                      <Button
                        variant="contained"
                        onClick={() => handleDeleteAdvice(index)}
                      >
                        Quitar de la lista
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </Grid>
        </Grid>
        <Grid container>
          <Grid item xs={12} textAlign="center">
            <h1>Buscador de consejos</h1>
            <form onSubmit={handleSubmit(onSubmit)}>
              <div>
                Palabra clave:
                <Controller
                  name="search"
                  control={control}
                  defaultValue=""
                  render={({ field }) => (
                    <input required {...field} type="text" />
                  )}
                />
                <p></p>
              </div>
              <div>
                <Button
                  type="submit"
                  variant="contained"
                  startIcon={<SearchIcon />}
                >
                  Search
                </Button>
              </div>
            </form>
            <p>Resultados de la búsqueda</p>
            <p>Texto</p>
            <table>
              <tbody>
                {list.map((advice, index) => (
                  <tr key={advice.id}>
                    <td>{advice.advice}</td>
                    <td>
                      <Button variant="contained" onClick={handleAddAdvice}>
                        Marcar como favorito
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </Grid>
        </Grid>
      </Grid>
    </div>
  );
}

export async function getStaticProps(userId) {
  let advices = [];
  try {
    const response = await api.get();
    advices = response.data.slip;
  } catch (e) {}

  return {
    props: { advices },
  };
}
